import turtle
import random

# **Configuración del jugador, estrellas y obstáculos**
player = turtle.Turtle()
player.shape("turtle")
player.color("green")
player.shapesize(stretch_wid=1, stretch_len=2)  # Tamaño original de la tortuga
player.penup()

game_objects = []
star_counter = 0
missed_red_stars = 0
counter_display = turtle.Turtle()
counter_display.hideturtle()
counter_display.penup()
counter_display.goto(-400, 260)
counter_display.color("white")
counter_display.write("Estrellas: 0", align="left", font=("Arial", 16, "normal"))

def create_star():
    star = turtle.Turtle()
    star.color("yellow")
    star.shapesize(stretch_wid=1.5, stretch_len=1.5)
    star.penup()
    star.goto(random.randint(-380, 380), random.randint(-240, 240))
    game_objects.append(star)

def create_red_star():
    red_star = turtle.Turtle()
    red_star.color("red")
    red_star.shapesize(stretch_wid=1.5, stretch_len=1.5)
    red_star.penup()
    red_star.goto(random.randint(-380, 380), random.randint(-240, 240))
    game_objects.append(red_star)

def create_obstacle():
    obstacle = turtle.Turtle()
    obstacle.color("red")
    obstacle.shapesize(stretch_wid=1, stretch_len=2)
    obstacle.penup()
    obstacle.goto(random.randint(-380, 380), random.randint(-240, 240))
    game_objects.append(obstacle)

def move_player_left():
    x = player.xcor()
    x -= 20  # Ajusta la velocidad moviendo este valor hacia la izquierda
    if x < -380:
        x = -380
    player.setx(x)

def move_player_right():
    x = player.xcor()
    x += 20  # Ajusta la velocidad moviendo este valor hacia la derecha
    if x > 380:
        x = 380
    player.setx(x)

def move_player_up():
    y = player.ycor()
    y += 20  # Ajusta la velocidad moviendo este valor hacia arriba
    if y > 240:
        y = 240
    player.sety(y)

def move_player_down():
    y = player.ycor()
    y -= 20  # Ajusta la velocidad moviendo este valor hacia abajo
    if y < -240:
        y = -240
    player.sety(y)

# Configuración de la ventana
wn = turtle.Screen()
wn.title("Juego de la Tortuga")
wn.bgcolor("black")
wn.setup(width=800, height=600)
wn.listen()
wn.onkeypress(move_player_left, "Left")
wn.onkeypress(move_player_right, "Right")
wn.onkeypress(move_player_up, "Up")
wn.onkeypress(move_player_down, "Down")

# Bucle principal del juego
for _ in range(10):  # Controla el número inicial de estrellas en el juego
    create_star()

for _ in range(5):  # Controla el número inicial de estrellas rojas en el juego
    create_red_star()

for _ in range(10):  # Controla el número inicial de obstáculos en el juego
    create_obstacle()

def game_loop():
    global star_counter, missed_red_stars  # Agrega esta línea para indicar que estas variables son globales
    # Mover y eliminar estrellas y obstáculos
    for game_object in game_objects:
        y = game_object.ycor()
        y -= 30  # Ajusta la velocidad ajustando este valor
        game_object.sety(y)

        if player.distance(game_object) < 75:  # Aumentamos la distancia para facilitar la recolección
            if "yellow" in game_object.color():
                star_counter += 1
                counter_display.clear()
                counter_display.write("Estrellas: {}".format(star_counter), align="left", font=("Arial", 16, "normal"))
                game_object.hideturtle()
                game_object.goto(random.randint(-380, 380), random.randint(-240, 240))
                create_star()  # Vuelve a crear un objeto
            elif "red" in game_object.color():
                missed_red_stars += 1
                if missed_red_stars >= 3:
                    print("Has perdido. Recolectaste 3 estrellas rojas incorrectamente.")
                    wn.bye()
                    return
                star_counter -= 1  # Disminuye el contador al recolectar una estrella roja
                counter_display.clear()
                counter_display.write("Estrellas: {}".format(star_counter), align="left", font=("Arial", 16, "normal"))
                game_object.hideturtle()
                game_object.goto(random.randint(-380, 380), random.randint(-240, 240))
                create_red_star()  # Vuelve a crear un objeto rojo

        if y < -300:
            game_object.hideturtle()
            game_objects.remove(game_object)

    # Crear nuevos obstáculos y estrellas continuamente
    if random.randint(1, 10) == 1:
        create_obstacle()

    if random.randint(1, 5) == 1:
        create_star()

    if random.randint(1, 8) == 1:
        create_red_star()

    wn.update()
    wn.ontimer(game_loop, 50)  # Llama a game_loop cada 50 milisegundos

# Inicia el bucle principal del juego
game_loop()

# Al salir del bucle principal, cierra la ventana al hacer clic
wn.mainloop()
